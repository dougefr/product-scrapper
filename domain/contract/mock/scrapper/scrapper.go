// Code generated by MockGen. DO NOT EDIT.
// Source: domain/contract/scrapper/scrapper.go

// Package mock_scrapper is a generated GoMock package.
package mock_scrapper

import (
	context "context"
	reflect "reflect"

	scrapper "github.com/dougefr/product-scrapper/domain/contract/scrapper"
	entity "github.com/dougefr/product-scrapper/domain/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockScrapper is a mock of Scrapper interface.
type MockScrapper struct {
	ctrl     *gomock.Controller
	recorder *MockScrapperMockRecorder
}

// MockScrapperMockRecorder is the mock recorder for MockScrapper.
type MockScrapperMockRecorder struct {
	mock *MockScrapper
}

// NewMockScrapper creates a new mock instance.
func NewMockScrapper(ctrl *gomock.Controller) *MockScrapper {
	mock := &MockScrapper{ctrl: ctrl}
	mock.recorder = &MockScrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScrapper) EXPECT() *MockScrapperMockRecorder {
	return m.recorder
}

// ScrapProduct mocks base method.
func (m *MockScrapper) ScrapProduct(ctx context.Context) (entity.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScrapProduct", ctx)
	ret0, _ := ret[0].(entity.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScrapProduct indicates an expected call of ScrapProduct.
func (mr *MockScrapperMockRecorder) ScrapProduct(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScrapProduct", reflect.TypeOf((*MockScrapper)(nil).ScrapProduct), ctx)
}

// MockFactory is a mock of Factory interface.
type MockFactory struct {
	ctrl     *gomock.Controller
	recorder *MockFactoryMockRecorder
}

// MockFactoryMockRecorder is the mock recorder for MockFactory.
type MockFactoryMockRecorder struct {
	mock *MockFactory
}

// NewMockFactory creates a new mock instance.
func NewMockFactory(ctrl *gomock.Controller) *MockFactory {
	mock := &MockFactory{ctrl: ctrl}
	mock.recorder = &MockFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFactory) EXPECT() *MockFactoryMockRecorder {
	return m.recorder
}

// GetScrapper mocks base method.
func (m *MockFactory) GetScrapper(ctx context.Context, url string) (scrapper.Scrapper, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScrapper", ctx, url)
	ret0, _ := ret[0].(scrapper.Scrapper)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScrapper indicates an expected call of GetScrapper.
func (mr *MockFactoryMockRecorder) GetScrapper(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScrapper", reflect.TypeOf((*MockFactory)(nil).GetScrapper), ctx, url)
}
